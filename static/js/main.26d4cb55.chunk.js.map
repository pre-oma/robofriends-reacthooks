{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundary.js","Containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","cardCompenet","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","useState","setRobots","setSearchField","useEffect","fetch","then","res","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","event","target","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAceA,EAZF,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KAAKC,EAAa,EAAbA,MAAMC,EAAO,EAAPA,GACtB,OACI,sBAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,gCACI,6BAAKF,IACL,4BAAIC,WCaLK,EAlBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAETC,EAAeD,EAAOE,KAAI,SAACC,EAAKC,GAClC,OACI,cAAC,EAAD,CAEAT,GAAIK,EAAOI,GAAGT,GACdF,KAAMO,EAAOI,GAAGX,KAChBC,MAAOM,EAAOI,GAAGV,OAHZU,MAOb,OACI,8BACKH,KCFEI,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,qBAAKX,UAAU,MAAf,SACI,uBACAA,UAAW,mCACXY,KAAK,SACLC,YAAY,gBACZC,SAAWH,OCCRI,EARD,SAACC,GACX,OACI,qBAAKC,MAAQ,CAACC,SAAU,SAAUC,OAAO,kBAAmBC,OAAO,SAAnE,SACKJ,EAAMK,Y,6CCmBJC,G,yDApBX,WAAYN,GAAO,IAAD,8BACd,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHA,E,qDAOlB,SAAkBC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAS,M,oBAG5B,WACI,OAAGG,KAAKJ,MAAMC,SACH,wDAEJG,KAAKX,MAAMK,a,GAhBEQ,cCkFbC,MA7Ef,WACI,MAA4BC,mBAAS,IAArC,mBAAO3B,EAAP,KAAe4B,EAAf,KACA,EAAqCD,mBAAS,IAA9C,mBAAOrB,EAAP,KAAoBuB,EAApB,KAEAC,qBAAU,WACNC,MAAM,8CACAC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OAAIP,EAAUO,QAChC,IAEF,IAIMC,EAAiBpC,EAAOqC,QAAO,SAAAC,GACjC,OAAOA,EAAM7C,KAAK8C,cAAcC,SAASlC,EAAYiC,kBAEzD,OAAQvC,EAAOyC,OAGX,sBAAK7C,UAAU,KAAf,UACI,6CACA,cAAC,EAAD,CAAWW,aAZG,SAACmC,GACnBb,EAAea,EAAMC,OAAOC,UAYxB,cAAC,EAAD,UACI,cAAC,EAAD,UACA,cAAC,EAAD,CAAU5C,OAASoC,WAP3B,0CCdOS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,OCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,8BACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.26d4cb55.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name,email,id}) =>{\r\n    return(\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt=\"robots\" src={`https://robohash.org/${id}?300x300`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\r\n    const cardCompenet = robots.map((user,i) => {\r\n        return(\r\n            <Card \r\n            key={i} \r\n            id={robots[i].id} \r\n            name={robots[i].name} \r\n            email={robots[i].email}/>\r\n        ) \r\n       \r\n    })\r\n    return(\r\n        <div>\r\n            {cardCompenet}\r\n        </div>\r\n    )\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n            className= 'pa3 ba b--green bg-lightest-blue'\r\n            type='search' \r\n            placeholder='search robots' \r\n            onChange ={searchChange}/>      \r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll =(props) =>{\r\n    return(\r\n        <div style ={{overflow: 'scroll', border:'1px solid black', height:'500px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport { render } from '@testing-library/react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error,info){\r\n        this.setState({hasError:true})\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>Oops. That is not good</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\n\r\nexport default ErrorBoundary;","import React, {useState, useEffect} from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport Scroll from '../Components/Scroll';\r\nimport './App.css';\r\nimport ErrorBoundary from '../Components/ErrorBoundary';\r\n\r\n\r\nfunction App(){\r\n    const [robots, setRobots] = useState([]);\r\n    const [searchfield, setSearchField] =useState('');\r\n\r\n    useEffect(()=>{\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n             .then(res => res.json())\r\n             .then(users => setRobots(users))\r\n    },[])\r\n\r\n    const onSearchChange =(event)=> {\r\n        setSearchField(event.target.value)\r\n    }\r\n\r\n    const filteredRobots = robots.filter(robot=>{\r\n        return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n    })\r\n    return !robots.length ?\r\n        <h1>Loading</h1> :\r\n        (\r\n        <div className='tc'>\r\n            <h1>Robofriends</h1>\r\n            <SearchBox searchChange={onSearchChange}/>\r\n            <Scroll>\r\n                <ErrorBoundary>\r\n                <CardList robots ={filteredRobots} />\r\n                </ErrorBoundary>\r\n                \r\n            </Scroll>\r\n        \r\n        </div>\r\n    )\r\n}\r\n\r\n// class App extends Component{\r\n//     constructor(){\r\n//         super()\r\n//         this.state = {\r\n//             robots: [],\r\n//             searchfield: ''\r\n//         }\r\n//     }\r\n\r\n//     componentDidMount() {\r\n//         fetch('https://jsonplaceholder.typicode.com/users')\r\n//             .then(res => res.json())\r\n//             .then(users => this.setState({robots:users}))\r\n//     }\r\n\r\n//    const onSearchChange =(event)=> {\r\n//         this.setState({searchfield: event.target.value})\r\n//     }\r\n\r\n//     render(){\r\n//         const {robots, searchfield} = this.state;\r\n//         const filteredRobots = robots.filter(robot=>{\r\n//             return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n//         })\r\n//         return !robots.length ?\r\n//              <h1>Loading</h1> :\r\n//             (\r\n//             <div className='tc'>\r\n//                 <h1>Robofriends</h1>\r\n//                 <SearchBox searchChange={this.onSearchChange}/>\r\n//                 <Scroll>\r\n//                     <ErrorBoundary>\r\n//                     <CardList robots ={filteredRobots} />\r\n//                     </ErrorBoundary>\r\n                    \r\n//                 </Scroll>\r\n               \r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n   \r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <div>\n      <App/>\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}